jQuery.noConflict();
var UPLOAD_FOLDERS = {
    avatars: {
        folder: 'avatars',
        description: 'Lưu hình đại diện của người dùng'
    },

    stores: {
        folder: 'stores',
        description: 'Lưu hình ảnh chi nhánh'
    },

    products: {
        folder: 'products',
        description: 'Lưu hình ảnh sản phẩm'
    },

    customers: {
        folder: 'customers',
        description: 'Lưu hình ảnh khách hàng'
    },

    invoice: {
        visa: {
            folder: 'visa',
            description: 'Lưu hình ảnh chứng từ giao dịch'
        }
    },

    warehouse: {
        folder: 'warehouse',
        description: 'Lưu chứng từ kho vận'
    }

};

let API_URL = window.location.origin + "/api/";
let HOST_URL = window.location.origin;

var currentSegment = location.pathname.substr(1);
currentSegment = currentSegment.split("/");
let CURRENT_SEGMENT = currentSegment[1] ? currentSegment[1] : "dashboard";

function setCookieLogin(res) {
    setCookie("jwt", res.data.token, 1);
    setCookie("jwt_refresh", res.data.refresh_token, 1);
    setCookie("user", JSON.stringify(res.data.user), 1);
    setCookie("user_permissions", JSON.stringify(res.data.permissions), 1);
}

function deleteAllCookies(noRedirect) {
    var cookie = document.cookie.split(";");
    for (var i = 0; i < cookie.length; i++) {
        var chip = cookie[i],
            entry = chip.split("="),
            name = entry[0];
        document.cookie =
            name + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/";
    }
    localStorage.clear();
    if (!noRedirect) location.href = HOST_URL + "/app/auth/login";
}

function array_range(min, max) {
    let data_array = [];
    for (i = min; i <= max; i++) {
        data_array.push(i);
    }
    return data_array;
}

function show_loader() {
    jQuery(".page-loader").css("display", "flex");
    jQuery(".page-loader").css("display", "flex");
}

function hide_loader() {
    window.setTimeout(() => {
        jQuery(".container-fluid").css("opacity", 1);
        jQuery(".page-loader").css("display", "none");
        jQuery(".wrapper-opacity").css("opacity", "1");
    }, 300);
}

function checkPermission(permission) {
    var permissions = JSON.parse(getCookie("user_permissions"));
    var feature = location.pathname.substr(1);
    feature = feature.split("/");
    feature = feature[1] ? feature[1] : "dashboard";

    // If permissions were not declared, will throw denied result
    var featurePermissions = permissions[feature] ? permissions[feature] : [];
    return featurePermissions.includes(permission);
}

function canRead() {
    return checkPermission("read");
}

function canCreate() {
    return checkPermission("create");
}

function canUpdate() {
    return checkPermission("update");
}

function canDelete() {
    return checkPermission("delete");
}

function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
    var expires = "expires=" + d.toUTCString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}

function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(";");
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == " ") {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

function setStorage(key, value) {
    var data = {};

    if (localStorage.getItem(CURRENT_SEGMENT) !== null) {
        data = JSON.parse(localStorage.getItem(CURRENT_SEGMENT));
    }
    data[key] = value;

    localStorage.setItem(CURRENT_SEGMENT, JSON.stringify(data));
}

function getStorage(key) {
    if (localStorage.getItem(CURRENT_SEGMENT) !== null) {
        var data = JSON.parse(localStorage.getItem(CURRENT_SEGMENT));
        return data[key];
    }

    return false;
}

function convertDateFormat(date) {
    // date = 2021-03-20 return 20-03-2021
    // date = 20-03-2021 return 2021-03-20
    var dateOrgParts = (date + '').split("-");
    return dateOrgParts[2] + "-" + dateOrgParts[1] + "-" + dateOrgParts[0];
}

async function doAjax(url, type, args) {
    let result;
    let errors;
    try {
        result = await jQuery.ajax({
            url: API_URL + url,
            type: type,
            data: JSON.stringify(args),
            beforeSend: (request) => {
                request.setRequestHeader(
                    "Authorization",
                    "Bearer " + getCookie("jwt")
                );
                request.setRequestHeader("Content-Type", "application/json");
            },
        });

        if (result.status_code == 403) {
            // Renew token
            var res = await postApi("auth/renew_token", {
                token: getCookie("jwt_refresh"),
            });

            if (res.success) {
                // Token renewal successfully
                setCookieLogin(res);

                // Let send request again
                return await doAjax(url, type, args);
            } else {
                // Token renewal failed
                return deleteAllCookies();
            }
        }

        return result;
    } catch (err) {
        console.log(err.responseText);

        errors = {
            success: false,
            messages: {
                result: "Đã có lỗi xảy ra với máy chủ API",
            },
        };

        return errors;
    }
}

async function doUploadAjax(args) {
    let result;
    let errors;
    try {
        result = await jQuery.ajax({
            url: API_URL + 'uploader/upload',
            type: 'POST',
            data: args,
            processData: false,
            contentType: false,
            beforeSend: (request) => {
                request.setRequestHeader(
                    "Authorization",
                    "Bearer " + getCookie("jwt")
                );
            },
        });

        if (result.status_code == 403) {
            // Renew token
            var res = await postApi("auth/renew_token", {
                token: getCookie("jwt_refresh"),
            });

            if (res.success) {
                // Token renewal successfully
                setCookieLogin(res);

                // Let send request again
                return await doAjax(url, type, args);
            } else {
                // Token renewal failed
                return deleteAllCookies();
            }
        }
        return result;

    } catch (err) {
        console.log(err);

        errors = {
            success: false,
            messages: {
                result: "Đã có lỗi xảy ra với máy chủ upload",
            },
        };

        return errors;
    }
}

async function putApi(url, param = "") {
    const result = await doAjax(url, "PUT", param);
    return result;
}

async function postApi(url, param = "") {
    const result = await doAjax(url, "POST", param);
    return result;
}

async function getApi(url, param = "") {
    const result = await doAjax(url, "GET", param);
    return result;
}

async function deleteApi(url, param = "") {
    const result = await doAjax(url, "DELETE", param);
    return result;
}

let LoaderBtn = {
    activate: function(selector) {
        jQuery(selector).each(function() {
            var _this = jQuery(this);
            _this.prop("disabled", true);

            var text = _this.text();
            var color = _this.css("background-color");
            var html =
                '<div class="preloader-wrapper"><div class="preloader-text" style="color:' +
                color +
                ';">' +
                text +
                '</div><div class="preloader-in-button preloader pl-size-xxs"><div class="spinner-layer pl-white"><div class="circle-clipper left"><div class="circle"></div></div><div class="circle-clipper right"><div class="circle"></div></div></div></div></div>';
            _this.html(html);
        });
    },

    reset: function(selector) {
        jQuery(selector).each(function() {
            var _this = jQuery(this);
            _this.prop("disabled", false);

            var text = _this.find(".preloader-text").text();

            _this.html(text);
        });
    },
};

let Pager = {
    limit: 30,
    offset: 0,
    to: 0,
    currentPage: 1,
    totalItem: 0,
    totalPage: 1,

    init: function($configs = []) {
        if (!$configs.callback) {
            console.log("callback is required when init pager");
            return;
        }

        this.totalItem = $configs.totalItem || this.totalItem;
        this.totalPage = Math.ceil(this.totalItem / this.limit);
        this.callback = $configs.callback;
        return this;
    },

    go2Page: async function(page) {
        if (page < 0) return;

        show_loader();

        this.currentPage = page;
        this.from = (page - 1) * this.limit;
        this.offset = this.from;

        this.to = this.totalItem < this.limit ? this.totalItem : this.limit;

        await this.callback();

        hide_loader();

        jQuery("html,body").animate({
            scrollTop: 0
        }, "slow");
    },

    previous: function(page) {
        if (page - 1 > 0) this.go2Page(page - 1);
        if (page - 1 == 0) this.go2Page(page);
    },

    getRange: function(paging) {
        var max = paging.currentPage + 3;
        var total = paging.totalPage + 1;
        if (max > total) max = total;
        if (max > paging.totalPage) {
            max = paging.totalPage;
        }
        var min = paging.currentPage - 2;
        if (min <= 0) min = 1;
        return array_range(min, max);
    },
};

function treeRender(level, text) {
    var html = '*';

    if (level == 0) {
        return '<span class="parent">' + text + '</span>';
    }

    for (let i = 0; i < level; i++) {
        var placeholder = i == (level - 1) ? text : '*';
        var childEl = i == (level - 1) ? '<span class="children-last">' + placeholder + '</span>' : '<span class="children">' + placeholder + '</span>';
        html = html.replace('*', childEl);
    }

    return html;
};

function select2() {
    setTimeout(() => {
        jQuery('.select2').select2({
            width: '100%',
            templateResult: function(node) {
                var level = jQuery(node.element).data('select2-level');

                if (typeof level === 'undefined') {
                    return node.text;
                }

                return jQuery(treeRender(level, node.text));
            }
        });
    }, 200);
}

function showInputErr(selector = '') {
    if (selector) {
        jQuery(selector).addClass('boder-err');
        setTimeout(() => {
            jQuery(selector).removeClass('boder-err');
        }, 1500);
    }
    return false;
}

function showMessErr(message = '') {
    toastr.error(message, '')
}

function showMessInfo(message) {
    toastr.info(message, '')
}

function showMessSuccess(message = 'Thành công') {
    toastr.success(message, '')
}

function showMessErrSystem() {
    toastr.error('Vui lòng thử lại sau!', '');
}

function checkApi(response) {
    if (response.success) return true;
    showMessErr(response.messages.result);
    return false;
}

function formatDefaultNumber(value = 0) { // xóa dấu , trong chuổi
    let tmp = parseFloat((value + '').replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', ''));
    return isNaN(tmp) ? 0 : tmp;
}

jQuery(document).on('keypress', '.input-not-enter', function(event) {
    return event.key === 'Enter' ? false : true;
});

function isset(object) {
    return (typeof object !== 'undefined');
}

jQuery(document).on('keyup', '.input-format-number', function(event) {
    var self = jQuery(this),
        n = parseFloat(self.val().replace(/\,/g, ''), 10);
    if (n > 0)
        self.val(n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ','));
    else {
        n = n != 0 ? '' : 0;
        self.val(n);
    }
});

function getUrlParam(name) {
    var url = new URL(window.location);
    return url.searchParams.get(name);
}

function parseNumber(num) { // 100000 => 100,000
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function _reload() {
    window.location.reload();
}

if (jQuery('#switch_store').length) {
    jQuery('#switch_store').select2();
    jQuery('#switch_store').on('change', async function() {
        jQuery('html').addClass('loading');
        var store_id = jQuery(this).val(),
            res = await putApi('me/switch_store', {
                store_id: store_id
            });
        if (checkApi(res)) {
            _reload();
        } else {
            jQuery('html').removeClass('loading');
        }
    })
}



window.onload = function() {
    do_validate();
}

function do_validate() {

    let permissions_user = JSON.parse(getCookie("user"));
    if (permissions_user.main_group_id == "8") {
        jQuery("#li-staff").css("display", "none");
    }
}

function formatdate(date) {
    var numbers = date.match(/\d+/g);
    var rep_date = numbers[2] + '-' + numbers[1] + '-' + numbers[0];
    return rep_date;
}

function date_complie(date) {
    let middle_pos = date.indexOf('-');
    let string_length = date.length;

    let start_date = date.slice(0, middle_pos);
    let end_date = date.slice(middle_pos + 1, string_length);


    start_date = formatdate(start_date);
    end_date = formatdate(end_date);

    return {
        start_date: start_date,
        end_date: end_date
    }
}